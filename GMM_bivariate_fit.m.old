function resultStruct = GMM_bivariate_fit(zmat,Hvec,Lvec,imat_prune,options)

if ~exist('options','var'), options = struct(); end

% Initialize estimates based on univariate fits to each trait

if ~isfield(options,'options_univariate')
  options.options_univariate = [];
end
resultStruct1 = GMM_univariate_fit(zmat(:,1),Hvec,Lvec,imat_prune,options.options_univariate,[],100); xs1 = GMM_univariate_mapparams(resultStruct1.x_fit,options.options_univariate);
resultStruct2 = GMM_univariate_fit(zmat(:,2),Hvec,Lvec,imat_prune,options.options_univariate,[],200); xs2 = GMM_univariate_mapparams(resultStruct2.x_fit,options.options_univariate);

% Fit bivariate model, without correlations

x0 = GMM_bivariate_mapparams(struct('pi1',xs1.pi1,'pi2',xs2.pi1,'pi3',1e-3,'sig01',xs1.sig0,'sig02',xs2.sig0,'sigb1',xs1.sigb,'sigb2',xs2.sigb,'rho0',0,'rhob',0),options);
GMM_bivariate_mapparams(x0,options) % Print out x0 as struct

%[cost0 fitstruct] = GMM_bivariate_cost(x0,zmat,Hvec,Lvec,imat_prune,options); % Make plots with initial estimates


% Fit bivariate model fixing params (sig01, sig02, sigb1, sigb2) from univariate fits, leaving only pi1, pi2, pi3, rho0, rhob

x0_struct = GMM_bivariate_mapparams(x0,options);
op_tmp = options; op_tmp.sig01=x0_struct.sig01; op_tmp.sig02=x0_struct.sig02; op_tmp.sigb1=x0_struct.sigb1; op_tmp.sigb2=x0_struct.sigb2;
x0_tmp = GMM_bivariate_mapparams(x0_struct,op_tmp);
x_fit_tmp = x0_tmp;

costfun_tmp = @(x)GMM_bivariate_cost(x,zmat,Hvec,Lvec,imat_prune,op_tmp);
[x_fit_tmp cost] = fminsearch_stochastic(costfun_tmp,x_fit_tmp); % First do stochastic optimization
GMM_bivariate_mapparams(x_fit_tmp,op_tmp) % Print out x_fit as struct
[x_fit_tmp cost] = fminsearch(costfun_tmp,x_fit_tmp,statset('MaxIter',1000,'MaxFunEvals',1000,'Display','iter'));
x_fit_tmp_struct = GMM_bivariate_mapparams(x_fit_tmp,op_tmp) % Print out x_fit as struct


% Fit full model

costfun = @(x)GMM_bivariate_cost(x,zmat,Hvec,Lvec,imat_prune,options);
x_fit = GMM_bivariate_mapparams(x_fit_tmp_struct,options);
[x_fit cost] = fminsearch(costfun,x_fit,statset('MaxIter',1000,'MaxFunEvals',1000,'Display','iter'));

[cost fitstruct] = GMM_bivariate_cost(x_fit,zmat,Hvec,Lvec,imat_prune,options); % Make plots

GMM_bivariate_mapparams(x_fit,options) % Print out x_fit as struct


if ~exist('fistruct','var'), fitstruct = struct(); end

if 0 % Compute "error bars" for parameter estimates? -- needs more debugging (H not neccessarily positive definite)
  H = hessian(costfun,x_fit); 
  lam = 0.0; C = inv((1-lam)*H+lam*diag(diag(H))); sevec = sqrt(diag(C))';
  GMM_bivariate_mapparams(x_fit-2*sevec,options)
  resultStruct = struct('cost',cost,'x_fit',x_fit,'fitstruct',fitstruct,'H',H,'sevec',sevec);  GMM_bivariate_mapparams(x_fit+2*sevec,options)
else
  resultStruct = struct('cost',cost,'x_fit',x_fit,'fitstruct',fitstruct);
end

keyboard

% save('~/tmp/snap.mat');

% ToDo
%   compute conditional & conjunctional tdr, etc.

